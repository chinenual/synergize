name: Go

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:

  build:
    name: Build
    runs-on: macos-latest
    steps:

#    - name: Set up Homebrew
#      uses: Homebrew/actions/setup-homebrew@master
#
#    - name: uninstall brew version of go
#      run: brew uninstall --ignore-dependencies go

    - name: Set up Go 1.x 
      uses: actions/setup-go@v2
      with:
        go-version: '1.14'
      id: go

#    - name: Set up portmidi
#      run: brew install portmidi
  
    - name: Check out code 
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        make installDependencies
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build
      run: make cibuild

    - name: Test
      run: make test

#    - name: Archive
#      uses: actions/upload-artifact@v2
#      with:
#         name: binaries
#         path: |
#           ./output/**/*
#
#  uitest:
#    name: UITest
#    needs: build
#    runs-on: ${{ matrix.os }}
#    defaults:
#      run:
#        working-directory: uitest
#    strategy:
#      matrix:
#        os: [macos-latest]
#    steps:
#
#    - name: Check out code
#      uses: actions/checkout@v2
#
#    - name: Unarchive
#      uses: actions/download-artifact@v2
#      with:
#        name: binaries
#        path: ./output
#
#    - name: chmod the binaries
#      run: |
#        find ../output -type f -exec chmod a+x {} \;
#        find ../output -type f -ls
#
#    - name: pre-provision the exe
#      run: ../output/darwin-amd64/Synergize.app/Contents/MacOS/Synergize -PROVISION
#
#    - name: SetupNode
#      uses: actions/setup-node@v2.1.1
#
#    - run: npm install
#
#    - run: npm test
